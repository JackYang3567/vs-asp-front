using Game.Entity.Accounts;
using Game.Kernel;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
namespace Game.IData
{
	public interface IAccountsDataProvider
	{
		Message Login(UserInfo user);
		Message Register(UserInfo user, string parentAccount, string adid);
		Message IsAccountsExist(string accounts);
		Message IsNickNameExist(string nickName);
		void ClearAccountsAdvertiseroByUserID(int userID);
		Message PlayerDraw(int userID, decimal dwScore, string strSafePwd, string strOrderID, string strClientIP);
		DataSet GetIndividualDatum(int userID);
		Message PLayerBindBank(int userID, string UserName, string CardNO, string BankName, string bankAddress);
		Message GetBankBindInfo(int userID);
		int GetUserIDByNickName(string nickName);
		int GetUserIDByAccounts(string accounts);
		string GetAccountsByUserID(int userID);
		string GetNickNameByUserID(int userID);
		int GetGameIDByUserID(int userID);
		UserInfo GetUserBaseInfoByUserID(int userID);
		string GetAccountsBySubDomain(string subDomain);
		IndividualDatum GetUserContactInfoByUserID(int userID);
		Message GetUserGlobalInfo(int userID, int gameID, string Accounts);
		string GetPasswordCardByUserID(int userId);
		AccountsFace GetAccountsFace(int customId);
		AccountsFace GetAccountsFace(int customId, int userId);
		IList<AccountsInfo> GetAccountsInfoList(ArrayList arrID);
		DataSet GetExperienceRank(int count);
		Message ResetLogonPasswd(AccountsProtect sInfo);
		Message ResetLoginPasswdByLossReport(UserInfo userInfo, string reportNo);
		Message ResetInsurePasswd(AccountsProtect sInfo);
		Message ModifyLogonPasswd(int userID, string srcPassword, string dstPassword, string ip);
		Message ModifyInsurePasswd(int userID, string srcPassword, string dstPassword, string ip);
		Message ApplyUserSecurity(AccountsProtect sInfo);
		Message ModifyUserSecurity(AccountsProtect newInfo);
		Message GetUserSecurityByUserID(int userID);
		Message GetUserSecurityByGameID(int gameID);
		Message GetUserSecurityByAccounts(string accounts);
		Message ConfirmUserSecurity(AccountsProtect info);
		Message ApplyUserMoorMachine(AccountsProtect sInfo);
		Message RescindUserMoorMachine(AccountsProtect sInfo);
		Message ModifyUserIndividual(IndividualDatum user, AccountsInfo info);
		Message ModifyUserFace(int userID, int faceID);
		Message ModifyUserNickname(int userID, string nickName, string ip);
		Message UserConvertPresent(int userID, int medals, string ip);
		IList<UserInfo> GetUserInfoOrderByLoves();
		DataSet GetLovesRanking(int num);
		Message UserConvertMedal(int userID, int medals, string ip);
		bool PasswordIDIsEnable(string serialNumber);
		bool userIsBindPasswordCard(int userId);
		bool UpdateUserPasswordCardID(int userId, int serialNumber);
		bool ClearUserPasswordCardID(int userId);
		SystemStatusInfo GetSystemStatusInfo(string key);
		MemberProperty GetMemberProperty(int memberOrder);
		AccountsSignin GetAccountsSignin(int userId);
		Message Signin(int userId, string ip);
		string GetAgentByDomain(string domain);
		AccountsAgent GetAccountAgentByUserID(int userID);
		AccountsAgent GetAccountAgentByDomain(string domain);
		int GetAgentChildCount(int userID);
		Message InsertCustomFace(AccountsFace accountsFace);
		PagerSet GetList(string tableName, int pageIndex, int pageSize, string condition, string orderby);
		PagerSet GetList(string tableName, int pageIndex, int pageSize, string condition, string orderby, string[] fields);
		object GetObjectBySql(string sqlQuery);
		Message ExcuteByProce(string proceName, Dictionary<string, object> dir);
		Message ExcuteByProceDataSet(string proceName, Dictionary<string, object> dir);
		DataSet GetDataSetBySql(string sql);
		DataTable MySpreadInfo(int uid, int dateType);
		DataTable MyOwnSpreadCount(int uid);
		Message SpreadBalance(int uid, double balance, string ip);
		DataTable MySpreadCntInfo(int uid, int type);
		PagerSet QuerySpreadScore(int uid, int type, int recordType, DateTime bTime, DateTime eTime, int pageIndex, int pageSize);
		PagerSet QuerySpreadDailyRpt(int uid, string account, int lev, DateTime bTime, DateTime eTime, int pageIndex, int pageSize);
		Message MySpreadCheck(int gameid);
		DataTable AgentCashInfo();
		CashSetting PlayerCashInfo();
	}
}
